#include <stdio.h>
#include <stdlib.h>

// Function to display the game board
void displayBoard(char board[3][3]) {
    printf("\n");
    printf(" %c | %c | %c \n", board[0][0], board[0][1], board[0][2]);
    printf("-----------\n");
    printf(" %c | %c | %c \n", board[1][0], board[1][1], board[1][2]);
    printf("-----------\n");
    printf(" %c | %c | %c \n", board[2][0], board[2][1], board[2][2]);
    printf("\n");
}

// Function to initialize the board with empty spaces
void initializeBoard(char board[3][3]) {
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

// Function to check if a move is valid
int isValidMove(char board[3][3], int row, int col) {
    // Check if position is within bounds
    if(row < 0 || row > 2 || col < 0 || col > 2) {
        return 0; // Invalid
    }
    // Check if position is empty
    if(board[row][col] == ' ') {
        return 1; // Valid
    }
    return 0; // Invalid
}

// Function to check for a winner
char checkWinner(char board[3][3]) {
    // Check rows
    for(int i = 0; i < 3; i++) {
        if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
            return board[i][0];
        }
    }
    
    // Check columns
    for(int i = 0; i < 3; i++) {
        if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
            return board[0][i];
        }
    }
    
    // Check diagonals
    if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
        return board[0][0];
    }
    if(board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
        return board[0][2];
    }
    
    return ' '; // No winner yet
}

// Function to check if board is full (tie game)
int isBoardFull(char board[3][3]) {
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            if(board[i][j] == ' ') {
                return 0; // Board is not full
            }
        }
    }
    return 1; // Board is full
}

int main() {
    char board[3][3];
    int currentPlayer = 1; // Player 1 starts
    int row, col;
    char winner = ' ';
    
    printf("=== TIC TAC TOE ===\n");
    printf("Player 1: X | Player 2: O\n");
    printf("Enter moves as row and column numbers (0-2)\n\n");
    
    // Initialize the board
    initializeBoard(board);
    
    // Main game loop
    while(1) {
        // Display current board
        displayBoard(board);
        
        // Get player move
        printf("Player %d's turn:\n", currentPlayer);
        printf("Enter row (0-2): ");
        scanf("%d", &row);
        printf("Enter column (0-2): ");
        scanf("%d", &col);
        
        // Validate move
        if(!isValidMove(board, row, col)) {
            printf("Invalid move! Try again.\n");
            continue;
        }
        
        // Make the move
        if(currentPlayer == 1) {
            board[row][col] = 'X';
        } else {
            board[row][col] = 'O';
        }
        
        // Check for winner
        winner = checkWinner(board);
        if(winner != ' ') {
            displayBoard(board);
            if(winner == 'X') {
                printf("Player 1 (X) wins!\n");
            } else {
                printf("Player 2 (O) wins!\n");
            }
            break;
        }
        
        // Check for tie
        if(isBoardFull(board)) {
            displayBoard(board);
            printf("It's a tie!\n");
            break;
        }
        
        // Switch players
        currentPlayer = (currentPlayer == 1) ? 2 : 1;
    }
    
    printf("Game Over!\n");
    return 0;
}