#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ==============================
// SIMPLE TIC TAC TOE GAME (2 Players)
// ==============================

// Function to print the board
void printBoard(char board[9]) {
    printf("\n");
    printf(" %c | %c | %c \n", board[0], board[1], board[2]);
    printf("---|---|---\n");
    printf(" %c | %c | %c \n", board[3], board[4], board[5]);
    printf("---|---|---\n");
    printf(" %c | %c | %c \n", board[6], board[7], board[8]);
    printf("\n");
}

// Fill board with numbers 1 to 9
void resetBoard(char board[9]) {
    for (int i = 0; i < 9; i++) {
        board[i] = '1' + i;   // Example: board[0] = '1', board[1] = '2', ...
    }
}

// Check if move is allowed
int isValidMove(char board[9], int pos) {
    if (pos < 1 || pos > 9) return 0;  // Must be 1 to 9
    if (board[pos - 1] == 'X' || board[pos - 1] == 'O') return 0; // Already filled
    return 1; // Move is valid
}

// Check winner
char checkWinner(char board[9]) {
    // Rows
    for (int i = 0; i < 9; i += 3)
        if (board[i] == board[i+1] && board[i+1] == board[i+2])
            return board[i];

    // Columns
    for (int i = 0; i < 3; i++)
        if (board[i] == board[i+3] && board[i+3] == board[i+6])
            return board[i];

    // Diagonals
    if (board[0] == board[4] && board[4] == board[8]) return board[0];
    if (board[2] == board[4] && board[4] == board[6]) return board[2];

    return ' '; // No winner yet
}

// Check if all boxes are filled
int isBoardFull(char board[9]) {
    for (int i = 0; i < 9; i++) {
        if (board[i] != 'X' && board[i] != 'O') return 0; // Found empty spot
    }
    return 1; // Full board
}

// ==============================
// MAIN FUNCTION
// ==============================
int main() {
    char board[9];       // Board with 9 places
    char player1[50], player2[50]; 
    int turn = 1;        // 1 = Player 1, 2 = Player 2
    int pos;             // Chosen position
    char winner = ' ';   // Stores winner

    printf("=== TIC TAC TOE ===\n\n");

    // Input player names
    printf("Enter Player 1 name (X): ");
    fgets(player1, sizeof(player1), stdin);
    player1[strcspn(player1, "\n")] = 0;

    printf("Enter Player 2 name (O): ");
    fgets(player2, sizeof(player2), stdin);
    player2[strcspn(player2, "\n")] = 0;

    printf("\n👉 %s = X\n👉 %s = O\n", player1, player2);

    // Start new game
    resetBoard(board);

    // Game loop
    while (1) {
        // Clear screen before printing new board
        #ifdef _WIN32
            system("cls");
        #else
            system("clear");
        #endif

        printf("=== TIC TAC TOE ===\n");
        printBoard(board);

        // Ask current player for move
        if (turn == 1)
            printf("%s's turn (X). Enter position (1-9): ", player1);
        else
            printf("%s's turn (O). Enter position (1-9): ", player2);

        scanf("%d", &pos);

        // Check if move is valid
        if (!isValidMove(board, pos)) {
            printf("❌ Invalid move! Press Enter and try again.\n");
            getchar(); getchar(); // Wait
            continue;
        }

        // Place X or O
        board[pos - 1] = (turn == 1) ? 'X' : 'O';

        // Check winner
        winner = checkWinner(board);
        if (winner != ' ') {
            #ifdef _WIN32
                system("cls");
            #else
                system("clear");
            #endif
            printBoard(board);
            if (winner == 'X') printf("🎉 %s wins! 🎉\n", player1);
            else printf("🎉 %s wins! 🎉\n", player2);
            break;
        }

        // Check tie
        if (isBoardFull(board)) {
            #ifdef _WIN32
                system("cls");
            #else
                system("clear");
            #endif
            printBoard(board);
            printf("🤝 It's a tie! Well played both players.\n");
            break;
        }

        // Change turn
        turn = (turn == 1) ? 2 : 1;
    }

    printf("\nGame Over! Thanks for playing!\n");
    return 0;
}
